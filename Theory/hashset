comapring 2 elements when they are in form of class


import java.util.*;

class Pair
{
    int first;
    int second;
    Pair(int first, int second)
    {
        this.first = first;
        this.second = second;
    }

    @Override
    public boolean equals(Object o){
        if(this == o) return true;
        if(o == null || getClass() != o.getClass()) return false;
        Pair p = (Pair) o;
        return first == p.first && second == p.second;
    }

    @Override
    public int hashCode(){
        return Objects.hash(first, second);
    }

    @Override
    public String toString(){
        return "{First : " + first + " | Second : " + second + "}";
    }
}

public class Main {
    public static void main(String args[]) {
        
        HashSet<Pair> hset = new HashSet<>();

        hset.add(new Pair(1,2));
        hset.add(new Pair(2,3));
        hset.add(new Pair(3,4));
        hset.add(new Pair(4,5));
        hset.add(new Pair(5,6));

        Iterator<Pair> it = hset.iterator();

        while(it.hasNext())
        {
            Pair p = it.next();
            System.out.println(p.first + " " + p.second);
        }

        System.out.println("----------------------------------");
        if(hset.contains(new Pair(4,5)))
        System.out.println("{4,5} pair is preset");

        hset.remove(new Pair(4,5));

        if(!hset.contains(new Pair(4,5)))
        System.out.println("{4,5} pair is removed");

        System.out.println("----------------------------------");

        it = hset.iterator();

        while(it.hasNext())
        {
            //System.out.println(it.first + " " + it.second);
            Pair p = it.next();
            if(p.first == 3)
            it.remove();
            else
            System.out.println(p);
           
        }

        System.out.println("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%555");
        for(Pair p : hset)
        System.out.println(p);
    }
}



-----------------------------

  Input:

1 2
2 3
3 4
4 5
5 6
----------------------------------
{4,5} pair is preset
{4,5} pair is removed
----------------------------------
{First : 1 | Second : 2}
{First : 2 | Second : 3}
{First : 5 | Second : 6}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%555
{First : 1 | Second : 2}
{First : 2 | Second : 3}
{First : 5 | Second : 6}


===================================================================================================================


  Code 2:


import java.util.HashSet;
import java.util.Objects;

class Person {
    String name;
    int age;

    Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Override equals to compare Person objects based on name and age
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;  // If both references point to the same object
        if (o == null || getClass() != o.getClass()) return false;  // Check if the class matches

        Person person = (Person) o;  // Cast to Person
        return age == person.age && Objects.equals(name, person.name);  // Compare name and age
    }

    // Override hashCode to generate hash based on name and age
    @Override
    public int hashCode() {
        return Objects.hash(name, age);
    }

    @Override
    public String toString() {
        return "Person{name='" + name + "', age=" + age + '}';
    }
}

public class Main {
    public static void main(String[] args) {
        // Create a HashSet to store Person objects
        HashSet<Person> people = new HashSet<>();

        // Adding new Person objects to the set
        people.add(new Person("Alice", 25));
        people.add(new Person("Bob", 30));
        people.add(new Person("Charlie", 35));
        people.add(new Person("Alice", 25));  // Duplicate Person (same name and age)

        // Print all elements in the HashSet
        System.out.println("People in the HashSet:");
        for (Person person : people) {
            System.out.println(person);
        }

        // Checking if the set contains a specific Person
        Person searchPerson = new Person("Alice", 25);
        if (people.contains(searchPerson)) {
            System.out.println("\nThe set contains: " + searchPerson);
        } else {
            System.out.println("\nThe set does not contain: " + searchPerson);
        }

        // Remove a Person from the HashSet
        people.remove(new Person("Alice", 25));
        System.out.println("\nAfter removing Alice:");
        for (Person person : people) {
            System.out.println(person);
        }
    }
}

--------------------------------------

  Output:

People in the HashSet:
Person{name='Alice', age=25}
Person{name='Charlie', age=35}
Person{name='Bob', age=30}

The set contains: Person{name='Alice', age=25}

After removing Alice:
Person{name='Charlie', age=35}
Person{name='Bob', age=30}


========================================================================
========================================================================

f you are using a HashSet in place of a PriorityQueue to store Pair objects during Dijkstra's algorithm, you have a couple of fundamental issues to address:

Issues:
Concurrent Modification Exception: You are modifying the HashSet (hset.add(new Pair(...)) and hset.remove(new Pair(...))) while iterating over it using an iterator (it.hasNext()). This will lead to a ConcurrentModificationException. You cannot modify a collection while iterating over it.

Inefficiency of HashSet: A HashSet does not maintain order, so there is no guarantee that you're processing the node with the smallest distance first. The essence of Dijkstra's algorithm is to always process the node with the smallest known distance next, which is why a PriorityQueue is preferred.

Code Review and Suggestions:
If you are required to use a HashSet, you need to handle the concurrent modification issue by either:

Collecting the pairs to be removed in a separate collection and then removing them after the iteration finishes.
Or, avoiding modifications within the loop entirely.
Let‚Äôs modify your code to address this issue.

--

class Pair{
	int node;
	int wt;

	Pair(int node, int wt)
	{
		this.node = node;
		this.wt = wt;
	}

	@Override
	public boolean equals(Object o)
	{
		if(this == o) return true; //if both references point to the same object
		if(o == null || getClass() != o.getClass()) return false; // Check if class matches
		
		Pair p = (Pair) o ;
		return p.node == node && p.wt == wt;
	}

         // Override hashCode to generate hash based on name and age
	@Override
	public int hashCode()
	{
		return Objects.hash(node, wt);
	}
}

class Solution
{
	ArrayList<Integer> Dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
	{
		HashSet<Pair> hset = new HashSet<>();

		int[] dis = new int[V];
		Arrays.fill(dis, (int)1e9);
		dis[S] = 0;

		hset.add(new Pair(S,0));

		Iterator<Pair> it = hset.iterator();

		while(it.hasNext())
		{
			Pair p = it.next();
			int nodeF = p.node;
			int wtF = p.wt;

			for(int i=0; i<adj.get(nodeF).size(); i++)
			{
				int n = adj.get(nodeF).get(i).get(0);
				int edgeWt = adj.get(nodeF).get(i).get(1);

				if(wtF + edgeWt < dis[n])
				{
					if(dis[n] != (int)1e9)
						hset.remove(new Pair(n,dis[n]));

					dis[n] = wtF + edgeWt;
					hset.add(new Pair(n, dis[n]));
				}
			}
		}

		ArrayList<Integer> res = new ArrayList<>();

		for(int ele : dis)
			res.add(ele);
		
		return res;

	}

}


Key Fixes:
Manual Selection of Minimum Pair: Since HashSet doesn‚Äôt provide any ordering, we manually select the pair with the smallest weight in each iteration.

Avoiding Concurrent Modification: Instead of modifying the HashSet while iterating, we collect the pairs to be removed (toRemove list) and remove them after finishing the loop.

Why This Approach Works:
Manual Search: The HashSet doesn‚Äôt inherently sort its elements, so we manually find the node with the smallest weight in each iteration.

Removing Safely: The HashSet is modified only outside the iteration, preventing ConcurrentModificationException.

Time Complexity:
Time Complexity: This solution is less efficient than using a PriorityQueue due to the manual search for the smallest element, which takes 
ùëÇ
(
ùëâ
)
O(V) time for each iteration. The total time complexity would be around 
ùëÇ
(
ùëâ
2
+
ùê∏
)
O(V 
2
 +E), where 
ùëâ
V is the number of vertices and 
ùê∏
E is the number of edges. This is worse than the ideal 
ùëÇ
(
(
ùëâ
+
ùê∏
)
log
‚Å°
ùëâ
)
O((V+E)logV) time complexity when using a PriorityQueue.
This code addresses the specific requirement to use HashSet, but keep in mind that using PriorityQueue would be significantly more efficient for Dijkstra's algorithm.

