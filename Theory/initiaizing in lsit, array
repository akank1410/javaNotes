The ListIterator allows both forward and backward traversal, unlike the regular Iterator, which only supports forward traversal.

The this keyword refers to the current instance of the class and is useful when referring to
instance variables and methods.

If no access modifier is specified, the default access level applies, meaning the member is accessible only within the same package.

Initializing an array

int[] a = new int[5];
a[0] = 1; a[1] = 2;

int[] b = {1,2,3,4,5};

Jagged array : It is an array of arrays where of member arrays can be different sizes,
i.e., we can create a 2-D array but with a variable number of columns in each row.

declaration snd initialization of Jagged array
=>  data_type array_name[][] = new data_type[n][];
array_name[] = new data_type[n1];
array_name[] = new data_type[n2];
array_name[] = new data_type[n3];
...
array_name[] = new data_type[nk];

n = Total no. of rows;  ni = number of columns in i-th row

ALTERNATIVE, WAYS TO INITIALIZE A JAGGED ARRAY
int arr[][] = new int[][] {new int[]{10,20,30,40}, new int[]{50, 60, 70, 80}, new int[]{110, 120}};

int[][] arr_name = { new int[] { 10, 20, 30, 40 },
new int[] { 50, 60, 70, 80, 90, 100 },
new int[] { 110, 120 } };

OR

int[][] arr_name = { { 10, 20, 30, 40 },
{ 50, 60, 70, 80, 90, 100 },
{ 110, 120 } };

int[][] arr_name = { new int[] { 10, 20, 30, 40 },
new int[] { 50, 60, 70, 80, 90, 100 },
new int[] { 110, 120 } };

OR

int[][] arr_name = { { 10, 20, 30, 40 }, { 50, 60, 70, 80, 90, 100 }, { 110, 120 } };


-----------------------------------------------------------------------------------------

1. return type int[]

return (new int[]{1,2});

2. return type ArrayList

you can use the Arrays.asList() method to create and initialize a list in one line
------------------------------------------------------------------------------------
ArrayList<Integer> fun(int a, int b);
{
	return new ArrayList<>();
}

return new ArrayList<>(Arrays.asList(1,2));

OR

If you want to return an ArrayList with the values 1 and 2, you can do it like this:
--------------------------------------------------------------------------------------
ArrayList<Integer> list = new ArrayList<>();
list.add(1);
list.add(2);
return list;


-----------------------------------------------------------------------------------------

Initializing hashset in java

import java.util.*;

HashSet<Integer> hset =  new HashSet<>(Arrays.asList(1,2,3,4,5));
Or
Integer[] arr = {5,6,7,8};
HashSet<Integer> h = new HashSet<>(Arrays.asList(arr));

public class Main {
    public static void main(String args[]) {
        System.out.println("Hello World!");

        HashSet<Integer> hset = new HashSet<>(Arrays.asList(1,2,3,4,5));

        Integer arr[] = {7,8,9};
        HashSet<Integer> h = new HashSet<>(Arrays.asList(arr));

        Iterator<Integer> it = hset.iterator();
        Iterator<Integer> i = h.iterator();

        while(it.hasNext())
        {
            System.out.print(it.next() + " ");
        }
        System.out.println();

        while(i.hasNext())
        {
            System.out.print(i.next() + " ");
        }
    }
}

-------------------------------------------------------------------------------

import java.util.*;

public class Main {
    public static void main(String args[]) {
        

        ArrayList<Integer> arr = new ArrayList<>(Arrays.asList(1,2,3));
        for(int n : arr)
        System.out.println(n);

        List<List<Integer>> arr1 = new ArrayList<>(Arrays.asList(
            Arrays.asList(1,2,3,4), Arrays.asList(5,6,7,8), Arrays.asList(9,2,1,1)
        ));

        System.out.println("-----");
        for(int j=0; j<arr1.size(); j++)
        {
            for(int i : arr1.get(j))
            System.out.print(i + " ");
        System.out.println();
        }

        System.out.println(" ----------- ");
        
        List<List<List<Integer>>> ls = new ArrayList<>(Arrays.asList(
            Arrays.asList(Arrays.asList(1,2,3), Arrays.asList(4,5,6), Arrays.asList(7,8,9)),
            Arrays.asList(Arrays.asList(4,1,5), Arrays.asList(7,2,5), Arrays.asList(5,2,7)),
            Arrays.asList(new ArrayList<>()),
            Arrays.asList(new ArrayList<>()),
            Arrays.asList(Arrays.asList(13,53,16), Arrays.asList(7,1,6), Arrays.asList(6,2,6)),
            Arrays.asList(Arrays.asList(34,3,25), Arrays.asList(71,1,6), Arrays.asList(6,2,6))
            ));

        for(int i=0; i<ls.size(); i++)
        { 
            System.out.print(i + " : " );
            for(List<Integer> a1 : ls.get(i))
            {
                System.out.print(a1 + " ");
            }
            System.out.println();
        }

    }
}


Output : 
1
2
3
-----
1 2 3 4 
5 6 7 8 
9 2 1 1 
 ----------- 
0 : [1, 2, 3] [4, 5, 6] [7, 8, 9] 
1 : [4, 1, 5] [7, 2, 5] [5, 2, 7] 
2 : [] 
3 : [] 
4 : [13, 53, 16] [7, 1, 6] [6, 2, 6] 
5 : [34, 3, 25] [71, 1, 6] [6, 2, 6] 

-------------------------------------------------------------------
-------------------------------------------------------------------
