Exception handling helpes in 
1. Managing the runtime error
2. Maintain the flow of the application
3. It enable developers to handle the unexpected situations gracefully without crashing the program.

Exception is an event that interrupts the normal flow of the program execution.

Exceptions are classified into 2 categories
1. Checked exceptions : are thise that the compiler requires the programmer to handle explicitly
2. Unchecked exceptions : are those that do not require explicit handling

try Block : Contains the code that may throw exceptions
catch Block : Catches and handes speific exceptions. Multiple catch bocks can be used to handle different types of exceptions.
finaly Block : Always executed regardless of whether an exception is thrown or handled.
               It is typically used for resource cleanup like closing files or database connections.

-------------------------
 Eg 1 : HANDLING FileNotFoundException
try{
  // Attempt to open the file
    Scanner in = new Scanner(new File("test.in"))
  ) {
      // If successful, this statement is executed
      System.out.println("Exit main()");
  } catch(FileNotFoundException ex){

     //If file is not found, this block executes
    System.out.println("File not found caught ... ");
  } finally {

    // Always executes, regardless of exception
    System.out.println("finally-block runs regardless of the state of exception");

-------------------------------

Eg 2 : Handling Input Errors

  public static void main(String args[]){

    try{
        int a = Integer.parseInt(args[0]);
        int b = Integer.parseInt(args[1]);
        int sum = a + b;
        System.out.println("Addition is: " + sum);
    } catch (ArrayIndexOutOfBoundsException s){
         System.out.println("Error: Insufficient input argumnts. ");
    } catch (NumberFormatException e){
         System.out.println("Error: Invalid number format.");
    }
  }

-------------------------------

Eg 3 : Method call stack and exception handling

pubic abc {

  public static void methodA(){

    System.out.println("Enter methodA()");
    try{
        int a = 5, b = 0;
        int c = a / b; // Division by zero will throw ArithmeticException
        System.out.println(c);
    } catch(ArithmeticException e){
        System.out.println("ArithmeticException caught in methodA");
    } finally{
         System.out.println("Exit methodA()");
    }

 }

}

-------------------------------

Eg 4 : Declaring Multiple Exceptions
=> A method can declare multiple exceptions in its signature using the throws keyword.
=> This is helpful when the method may excounter different types of exceptions.

public void methodD() throws XException, YException {

  if(someCondition)
      throw new XException("XException occured");
  if(anotheCondition)
      throw new YException("YException occured");

}

-------------------------------

Eg 5 : CatchingExceptions Using try-catch

 public void methodC(){

    try{
        methodD(); // calls a method that declares XException and YException
    } catch (XExeception ex){
        // Exception handler for XException
        System.out.println("Handled XException: " + ex.getMessage());
    } catch (YException ex){
        // Exception handle for YException
        System.out.println("Handled YException: " + ex.getMessage());
    } finally{
        // Cleanup code that always runs
        System.out.println("Finally block executed");
    }
  }

-------------------------------

Eg 6 :  Combining throw and throws


public class abc{

    public static void main(String[] args){

      try{
        methodA();
        System.out.println("Exit TRY of main()");
      } catch(ArithmeticException ex){
         System.out.println("ArithmeticException caught...");
        /* Prints stack trace for debugging */
        ex.printStackTrace();
      }
      System.out.println("Exit main() successfully");
   }

   public static void methodA() throws ArithmeticException{

    int a = 5, b = 0;
    if(b == 0)
      throw new ArithmeticException("Division by zero");

    int c = a/b;
    System.out.println("Result: " + c);
    System.out.println("Exit methodA()");
   }
}

-----------------------------------------

Eg 7 : USER-DEFINED EXCEPTIONS

// User-defined exception class (Checked Exception)
class InvalidBalanceException extends Exception{
  
    // Constructor to pass custom error message
    public InvalidBalanceException(String message){
        super(message);
    }
}

class abc{

  public static void main(String[] args){

    int balance;

    try{

        // Parse balance from command-line arguments
        balance = Integer.parseInt(args[0]); // May throw NumberFormatException

        // Call a method that may throw a user-defined exception
        updateBalance(balance);

    } catch (InvalidBalanceException ex){
        System.out.println("Caught in catch of InvalidBalanceException");
        ex.printStackTrace();

    } catch (NumberFormatException ex){
        System.out.println("Caught in catch of NumberFormatException");

    } catch (ArrayIndexOutOfBoundsException ex){
        System.out.println("Caught in catch of ArrayIndexOutOfBoundsException");

    } catch (Exception ex){
        System.out.println("Caught in catch of Parent Exception");

    }

    System.out.println("Main methid executed successfully.");
 }

  // Method to update balance, throws InvalidBalanceException if balance < 0
  public static voi updateBalance(int balance) throws InvalidBalanceException{
      if(balance < 0)
          throw new InvalidBalanceException("Account balance cannot br less than zero.");

      System.out.println("No exception occured in updateBalance() method.");
  }
}
