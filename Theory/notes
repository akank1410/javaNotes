About cache memory
1. It is a form RAM (random access memory) that stores recently accessed data for quick retrieval.
2. It sits between CPU and RAM, acting as an intermediary for faster data access.
3. Cache memory is a hardware or software component that stores data so that it can be accessed faster in the future. 
   It's a vital part of computer systems that improves performance by reducing the need to access main memory multiple times for the same data or instruction set.
4. Here's how cache memory works: 
  Location :  Cache memory is located between the main RAM and the CPU, closer to the processor core. 
  Data  : Cache memory stores copies of data from frequently used main memory locations, such as the result of an earlier computation or data stored elsewhere.
  Speed : Cache memory is smaller and faster than main memory, so it can access data more quickly. 
  Levels : Cache memory exists in three levels: L1, L2, and L3. 
            Level 1 is usually built into the processor and stores recently used data that's likely to be requested again soon. 
            Level 2 and Level 3 are usually external components that store additional information that the processor might need to run efficiently. 
            Level 1 is the fastest, but Level 2 and Level 3 still provide quick access. 

Cache memory can also be used in other types of software, such as: 
#Browsers: Cache remembers parts of pages, like images, so they open faster when you visit the site again. 
#Operating systems: Cache stores commonly used instructions and files. 
#Content delivery networks: Cache information on the server side to deliver websites faster. 
#Domain name systems: Cache information used to convert domain names to Internet Protocol addresses. 
#Databases: Cache can reduce latency in database queries. 

------------------------------------------------------------------------------------------------
HASHING
Hashing is the practice of transforming a given key or string of characters into another value for the purpose of security. 
Unlike standard encryption, hashing is always used for one-way encryption, and hashed values are very difficult to decode.

Encryption is a two-way function where information is scrambled in such a way that it can be unscrambled later. 
Hashing is a one-way function where data is mapped to a fixed-length value. Hashing is primarily used for authentication.

More details about implementing hashing via hashtable, hashmap, linked hashmap; etc
https://www.geeksforgeeks.org/batch/dsa-to-dev-batch-2-2-390-july/track/DSASP-Hashing/article/MjMxNg%3D%3D

=> A hash function takes a message of arbitrary length and generates a fixed length code.
=> "A hash function may give the same hash value for distinct messages."
      [This situation is known as a "collision." In a well-designed hash function, collisions are rare, 
      but they are theoretically possible because a hash function maps an infinite number of possible inputs to a finite number of possible outputs 
      (e.g., with a fixed-length hash code).]

TRAVERSING A HASHMAP

int arr[] = {1,2,3,4,12,3,4,5,2,5,7,64,1,2,3,4};
HashMap<Integer, Integer> hmap = new HashMap<>();

for(int ele : arr)
   hmap.put(ele, hmap.getOrDefault(ele, 0)+1);

System.out.println(hmap);
System.out.println("METHOD 1");
for(Map.Entry<Integer, Integer> ele : hmap.entrySet()){
   int key = ele.getKey();
   int val = ele.getValue();
   System.out.println(key + " : " + val);
}

System.out.println("METHOD 2");
hmap.forEach((k,v) -> System.out.println(k + " : " + (v + 10)));

System.out.println("METHOD 3");
Iterator hmIterator = hmap.entrySet().iterator();
while(hmIterator.hasNext()){
   Map.Entry mapEle = (Map.Entry)hmIterator.next();
   int val = ((int)mapEle.getValue() + 10);
   System.out.println(mapEle.getKey() + " : " + val);
}

OUTPUT:
{64=1, 1=2, 2=3, 3=3, 4=3, 5=2, 7=1, 12=1}
METHOD 1
64 : 1
1 : 2
2 : 3
3 : 3
4 : 3
5 : 2
7 : 1
12 : 1
METHOD 2
64 : 11
1 : 12
2 : 13
3 : 13
4 : 13
5 : 12
7 : 11
12 : 11
METHOD 3
64 : 11
1 : 12
2 : 13
3 : 13
4 : 13
5 : 12
7 : 11
12 : 11




------------------------------------------------------------------------------------------------------------
