Method 1: TLE


class Solution
{
    //Function to find the smallest window in the string s consisting
    //of all the characters of string p.
    
    // TC : O(n^3) | SC : O(256)
    static boolean inPattern(String s, int start, int end, String pattern)
    {
        int[] vis = new int[256];
        Arrays.fill(vis,0);
        
        for(char ch : pattern.toCharArray())
        vis[ch]++;
        
        for(int i=start; i<=end; i++)
        {
            if(vis[s.charAt(i)] > 0)
            vis[s.charAt(i)]--;
            
        }
        
        for(int ele : vis)
        {
            if(ele != 0)
            return false;
        }
        
        return true;
    }
    
    public static String smallestWindow(String s, String p)
    {
        // Your code here
        int N = s.length(), minn = Integer.MAX_VALUE;
        int start = 0, end = 0;
        for(int i=0; i<N; i++)
        {
            for(int j=0; j<N; j++)
            {
                if(inPattern(s, i, j, p))
                {
                    if(j-i+1 < minn)
                    {
                        minn = j-i+1; 
                        start = i; end = j;
                    }
                }
            }
        }
        
        return s.substring(start,end+1);
    }
}


Method 2:
