A permutation is an arrangement of all members of a set into some sequence or order. For a set of size 𝑛 the number of possible permutations is given by 𝑛!

n!, which is calculated as 
𝑛× ( 𝑛-1) * (n-2) * (n-3) * (n-4) ... n*(n-1)*(n-2) * ... * 1

tc : n * n! 
sc: O(n!)

class Solution {

    public void rec(String s, boolean[] check, StringBuffer str, Set<String> res){

		if(str.length() == s.length())
			res.add(str.toString());
		
		for(int i=0; i<s.length(); i++){

			if(check[i]) continue;
		
			str.append(s.charAt(i));
			check[i] = true;
			rec(s, check, str, res);
			check[i] = false;
			str.deleteCharAt(str.length()-1);

		}
		
	}

    public ArrayList<String> findPermutation(String s) {
        // Code here

    Set<String> res = new HashSet<>();
	
	int n = s.length();

	rec(s, new boolean[n], new StringBuffer(), res);

	return new ArrayList<>(res);

		
    }
}
