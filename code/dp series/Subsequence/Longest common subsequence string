Learning opportunity:
1. converting character array to string :

char[] ch = new char[n1];
return new String(ch);

2. subsequence is one where relative order of character remains same but characters not necesarily be contiguous

TC : O(n*m) + O(n+m);
SC = O(n*m) + O(n+m)

https://www.geeksforgeeks.org/convert-list-of-characters-to-string-in-java/
-------------------------------------------------------------------------------

import java.util.*;

class Solution {

    public static String longestCommonSubsequence(String text1, String text2) {

		int n1 = text1.length(), n2 = text2.length();
		int[][] dp = new int[n1+1][n2+1];
		
		for(int i=0; i<=n1; i++) dp[i][0] = 0;
		for(int j=0; j<=n2; j++) dp[0][j] = 0;

	        for(int i=1; i<=n1; i++)
		{

			for(int j=1; j<=n2; j++)
			{
                            if(text1.charAt(i-1) == text2.charAt(j-1))
				dp[i][j] = 1 + dp[i-1][j-1];
			     else
				dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
			}
		}

		int p1=n1, p2 = n2;
		char[] str = new char[dp[n1][n2]];
        int cnt = dp[n1][n2]-1;

		while(p1!=0 && p2!=0)
		{
			if(text1.charAt(p1-1) == text2.charAt(p2-1)){
				str[cnt--] = text1.charAt(p1-1);
				p1 -= 1; p2 -= 1;}
			else{
				if(dp[p1-1][p2] >= dp[p1][p2-1])
					p1 -= 1;
				else
					p2 -= 1;
			}
			
		}
		
		return new String(str);
    }

}

public class Main {
    public static void main(String args[]) {

        String s1 = "abcde", s2 = "bdgek";
        System.out.println("LCS is : " + Solution.longestCommonSubsequence(s1, s2));
    }
}
