// TC : O(h) + O(n) + O(h) || SC : O(n)
// Question : https://leetcode.com/problems/boundary-of-binary-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean isLeaf(TreeNode node){
		return node.left == null && node.right == null;
	}

    public void addLeft(TreeNode root, List<Integer> lis)
    {

	    while(root != null)
	    {
            if(!isLeaf(root)) lis.add(root.val);

		    if(root.left == null) 
			    root = root.right;
		    else
			    root = root.left;
    	}
    }

    public void addLeaf(TreeNode root, List<Integer> lis){

		if(isLeaf(root)) {
			lis.add(root.val);
			return;
		}

		if(root.left != null) addLeaf(root.left, lis);
		if(root.right != null) addLeaf(root.right, lis);
	}

    public void addRight(TreeNode root, List<Integer> lis)
    {
        if(root == null) return;
        Stack<Integer> stc = new Stack<>();

        while(root != null)
	    {
            if(!isLeaf(root)) stc.push(root.val);

		    if(root.right == null)
			    root = root.left;
		    else
			    root = root.right;
	    }

	    while(!stc.isEmpty())
	    {
		    lis.add(stc.pop());
	    }
    }

    public List<Integer> boundaryOfBinaryTree(TreeNode root) { 

	List<Integer> lis = new LinkedList<>();
	if(root == null) return lis;
	if(!isLeaf(root)) lis.add(root.val);

    addLeft(root.left, lis);
	addLeaf(root, lis);
    addRight(root.right, lis);

	return lis;
    }
}
