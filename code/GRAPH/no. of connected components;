class Solution {

    public void dfs(ArrayList<ArrayList<Integer>> adj, int node, boolean[] vis, ArrayList<Integer> lis)
	{
		vis[node] = true;
		lis.add(node);

		for(int n : adj.get(node))
		{
			if(!vis[n])
				dfs(adj, n, vis, lis);
		}

	}
	
    public void bfs(ArrayList<ArrayList<Integer>> adj, int node, boolean[] vis, ArrayList<Integer> lis)
	{
		Queue<Integer> q = new LinkedList<>();

		q.offer(node);

		while(!q.isEmpty())
		{
			int n = q.poll();
			if(vis[n]) continue;
			lis.add(n);
			vis[n] = true;
			

			for(int nei : adj.get(n))
			{
				if(!vis[nei])
				q.offer(nei);

			}
		}

	}

    public ArrayList<ArrayList<Integer>> connectedcomponents(int v, int[][] edges) {


	ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
	ArrayList<ArrayList<Integer>> res = new ArrayList<>();
	boolean[] vis = new boolean[v];
	Arrays.fill(vis, false);

	for(int i=0; i<v; i++)
		adj.add(new ArrayList<Integer>());

	for(int[] lis : edges)
	{
		adj.get(lis[0]).add(lis[1]);
		adj.get(lis[1]).add(lis[0]);
	}

	for(int i=0;i<v; i++)
	{
		if(!vis[i]){
		    	ArrayList<Integer> lis = new ArrayList<>();
		    	bfs(adj, i, vis, lis);
		    	//dfs(adj, i, vis, lis);
		    	Collections.sort(lis);
                res.add(lis);
		}
	}

	return res;

	}

}
