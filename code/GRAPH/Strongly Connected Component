https://www.geeksforgeeks.org/problems/strongly-connected-components-kosarajus-algo/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=strongly-connected-components-kosarajus-algo

class Solution
{
	private void dfs(int node, int[] vis, ArrayList<ArrayList<Integer>> adj, Stack<Integer> stc)
	{
		vis[node] = 1;
		
		for(int ele : adj.get(node))
		{
			if(vis[ele] != -1) continue;
			dfs(ele, vis, adj, stc);
		}

		stc.push(node);
	}

	private void dfs3(int node, int[] vis, int[][]adjT)
	{
		vis[node] = 1;
		
		for(int ele : adjT.get(node))
		{
			if(vis[ele] == -1)
				dfs3(ele, vis, adjT);
		}
	}

	// to find the number of strongly connected components in the graph
	public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)
	{
		int[] vis = new int[V];
		Arrays.fill(vis, -1);
		Stack<Integer> stc = new Stack<Integer>();

		//find the final time of all the node
		for(int i=0; i<V; i++)
		{
			if(vis[i] == -1)
				dfs(i, vis, adj, stc);
		}
	
		ArrayList<ArrayList<Integer>> adjT = new ArrayList<>();
		
		for(int i=0; i<V; i++)
			adjT.add(new ArrayList<Integer>());

		for(int i=0; i<V; i++)
		{	
			vis[0] = -1;
			for(int ele : adj.get(i))
				adjT.get(ele).add(i);
		}
		
		int scc = 0;
		while(!stc.isEmpty())
		{
			int node = stc.pop();
			if(vis[node] == -1)
			{
				scc++;
				dfs3(node, vis, adjT);
			}
			
		}

		return scc;

	}

}


--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

class Graph{

    int V; // Number of vertices
    ArrayList<ArrayList<Integer>> adj = new ArrayList<>(); // Adjacency list
    
    public Graph(int V){
        this.V = V;
        for(int i=0; i<V; i++)
            adj.add(new ArrayList<>());
    }

    // Add edge to the graph
    public void addEdge(int u, int v){
        adj.get(u).add(v);
    }

    // First DFS to fill stack with vertices based on finish times
    void DFS(int v, boolean[] visited, Stack<Integer> stc)
    {
        visited[v] = true;

        for(int i : adj.get(v))
        {
            if(!visited[i])
                DFS(i, visited, stc);
        }
        stc.push(v);
    }

    // DFS on transpose graph to find SCCs
    void DFSUtil(int v, boolean[] visited){
        visited[v] = true;
        //System.out.print(v + " ");
        for(int i : adj.get(v))
            if(!visited[i])
                DFSUtil(i, visited);
    }

    //Function to get the transpose of the graph
    Graph getTranspose(){
        Graph gT = new Graph(V);
        for(int v=0; v<V; v++)
        {
            for(int i : adj.get(v))
                gT.adj.get(i).add(v);
        }

        return gT;
    }

    // Function to find and print all SCCs
    int findSCCs() {
        Stack<Integer> stc = new Stack<>();

        // Step 1: Fill the stack with vertices according to their finishing times
        boolean[] visited = new boolean[V];
        Arrays.fill(visited, false);

        for(int i=0; i<V; i++)
            if(!visited[i])
                DFS(i, visited, stc);
        
        // Step 2: Transpose the graph
        Graph gT = getTranspose();

        // Step 3: Process all vertices in the order of their finishing times
        Arrays.fill(visited,false); // Reset visited array
        int cnt=0;
        while(!stc.isEmpty())
        {
            int v = stc.pop();

            if(!visited[v])
            {
                gT.DFSUtil(v, visited);
                cnt++;
                //System.out.println();
            }
        }
        return cnt;

    }
}


class Solution
{
    //Function to find number of strongly connected components in the graph.
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)
    {
        //code here
        Graph g = new Graph(V);
        
        for(int i=0; i<V; i++)
        {
            for(int ele : adj.get(i))
            g.addEdge(i,ele);
        }
        
        return g.findSCCs();
    }
}
