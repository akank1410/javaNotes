This problem can be solve both with DFS and Kruskal Algorithm

class DisjointSet{

	ArrayList<Integer> size = new ArrayList<>();
	ArrayList<Integer> parent = new ArrayList<>();

	public DisjointSet(int n)
	{
		for(int i=0; i<=n; i++)
		{
			size.add(1);
			parent.add(i);
		}
	}

	public int findUPar(int node)
	{
		if(parent.get(node) == node) return node;

		int ulp = findUPar(parent.get(node));
		parent.set(node, ulp);
		return ulp;
	}

	public void unionBySize(int u, int v)
	{
		int ulp_u = findUPar(u);
		int ulp_v = findUPar(v);
		
		if(ulp_u == ulp_v) return;

		if(size.get(ulp_u) < size.get(ulp_v))
		{
			parent.set(ulp_u, ulp_v);
			size.set(ulp_v, size.get(ulp_u) + size.get(ulp_v));
		}
		else
		{
			parent.set(ulp_v, ulp_u);
			size.set(ulp_u, size.get(ulp_u) + size.get(ulp_v));
		}
	}
}

class Solution {
    public int findCircleNum(int[][] isConnected) {
		
	int V = isConnected.length;
	DisjointSet s = new DisjointSet(V);

    // O(n^2)
	for(int i=0; i<V; i++)
	{
		for(int j=0; j<V; j++)
		{
			if(isConnected[i][j] == 1)
			s.unionBySize(i,j);
		}
	}
        
	int cnt = 0;


    // TC : parent is O(1) => O(V)
	for(int i=0; i<V; i++)
	{
		if(s.parent.get(i) == i)
		cnt++;
	}

	return cnt;
    }
}
