TC : O( E log E + E log E) =  O(2E log E) ~ O(E log E)

class tuple{
	int wt;
	int node;
	int parent;
	public tuple(int wt, int node, int parent)
	{
		this.wt = wt;
		this.node = node;
		this.parent = parent;
	}
}

class Solution {
        // u =>   [v,wt]
	// 0 => { [1,2]
    static int spanningTree(int V, int E, List<List<int[]>> adj) {
        
	PriorityQueue<tuple> pq = new PriorityQueue<>((a,b) -> a.wt-b.wt);
	pq.offer(new tuple(0,0,-1));
	
	int[] vis = new int[V];
	Arrays.fill(vis,-1);
	
	ArrayList<tuple> res = new ArrayList<>();

	int sum = 0;
	
	while(!pq.isEmpty())  // O(E) => no. of edges
	{
		tuple t = pq.poll();  // O(log E)
		int wtN = t.wt;
		int nodeN = t.node;
		int parentN = t.parent;

		if(vis[nodeN] != -1) continue;

		vis[nodeN] = 1;
		sum += wtN;
		if(parentN != -1)
		res.add(t);
		

		for(int[] adjN : adj.get(nodeN)) // O(E) => overall adjacent nodes traversed
		{
			if(vis[adjN[0]] == -1)
			pq.offer(new tuple(adjN[1], adjN[0], nodeN)); // O(log(E)
		
		}
	
	}
	
// 	for(tuple t1 : res)
// 	System.out.print(t1.node + " " + t1.parent + " -- ");
	
	return sum;
	
    }

}
