import java.util.*;

class DisjointSet{
	
	ArrayList<Integer> rank = new ArrayList<>();
	ArrayList<Integer> parent = new ArrayList<>();
	ArrayList<Integer> size = new ArrayList<>();
	
    public DisjointSet(int n)
	{
		for(int i=0; i<=n; i++)		
		{
			rank.add(0);
			parent.add(i);
			size.add(1);
		}
	}

	public int findUPar(int node)
	{

		if(parent.get(node) == node) return node;

		int ulp = findUPar(parent.get(node));
		parent.set(node, ulp);
		return ulp;
	}

	public void unionByRank(int u, int v)
	{
		int ulp = parent.get(u);
		int vlp = parent.get(v);

		if(ulp == vlp) return;

		if(rank.get(ulp) < rank.get(vlp))
			parent.set(ulp, vlp);
		else if(rank.get(vlp) < rank.get(ulp))
			parent.set(vlp, ulp);
		else
		{
			parent.set(ulp,vlp);
			rank.set(vlp, rank.get(vlp)+1);
		}
	}

	public void unionBySize(int u, int v){
		
		int ulp = parent.get(u);
		int vlp = parent.get(v);

		if(vlp == ulp) return;

		if(size.get(ulp) < size.get(vlp))
		{
			parent.set(ulp,vlp);
			size.set(vlp, size.get(ulp)+size.get(vlp));
		}
		else
		{
			parent.set(vlp,ulp);
			size.set(ulp, size.get(ulp)+size.get(vlp));
		}
	}
}

public class Main {
    public static void main(String args[]) {
  System.out.println("Hello World!");

        DisjointSet s = new DisjointSet(7);

        s.unionByRank(1,2);
        s.unionByRank(2,3);
        s.unionByRank(4,5);
        s.unionByRank(6,7);
        s.unionByRank(5,6);

        // s.unionBySize(1,2);
        // s.unionBySize(2,3);
        // s.unionBySize(4,5);
        // s.unionBySize(6,7);
        // s.unionBySize(5,6);

        if(s.findUPar(3) == s.findUPar(7))
        System.out.println("Same");
        else
        System.out.println("Not Same");

        s.unionByRank(3,7);

        if(s.findUPar(3) == s.findUPar(7))
        System.out.println("Same");
        else
        System.out.println("Not Same");
    }
}
