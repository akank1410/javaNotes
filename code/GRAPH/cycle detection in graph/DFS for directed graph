TC : O(V) + O(V + E)
SC : O(3V) ~ O(V)

class Solution
{

	public Boolean dfs(ArrayList<ArrayList<Integer>> adj, int[] vis, int[] path, int node)
		{
			vis[node] = 1;
			path[node] = 1;
			
			for(int ele : adj.get(node))
			{
				if(vis[ele] == -1)
				{
					if(dfs(adj, vis, path, ele)) return true;
				}
				else
				{
					if(path[ele] == 1) return true;
				}
			}

			path[node] = 0;
			return false;

		}	

	public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj)
		{
			int[] vis = new int[V];
			Arrays.fill(vis, -1);
			int[] path = new int[V];
			Arrays.fill(path, -1);

			for(int i=0; i<V; i++)
			{
				if(vis[i] == -1)
				{
					if(dfs(adj, vis, path, i)) return true;
				}

			}

			return false;
		}
}class Solution
{

	public Boolean dfs(ArrayList<ArrayList<Integer>> adj, int[] vis, int[] path, int node)
		{
			vis[node] = 1;
			path[node] = 1;
			
			for(int ele : adj.get(node))
			{
				if(vis[ele] == -1)
				{
					if(dfs(adj, vis, path, ele)) return true;
				}
				else
				{
					if(path[ele] == 1) return true;
				}
			}

			path[node] = 0;
			return false;

		}	

	public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj)
		{
			int[] vis = new int[V];
			Arrays.fill(vis, -1);
			int[] path = new int[V];
			Arrays.fill(path, -1);

			for(int i=0; i<V; i++)
			{
				if(vis[i] == -1)
				{
					if(dfs(adj, vis, path, i)) return true;
				}

			}

			return false;
		}
}
