



class Solution{
    
boolean dfs(ArrayList<ArrayList<Integer>> adj, int[] vis, int node, int prev)
{
	vis[node] = 1;
	for(int ele : adj.get(node))
	{
		if(vis[ele] != -1 && ele != prev) 
		{
		    //System.out.println(node + " " + ele);
		    return true;
	    }
		else if(vis[ele] == -1)
		{
			if(dfs(adj, vis, ele, node)) return true;
		
		}
	}

	return false;
}

	public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj)
	{
		
	int[] vis = new int[V];
	Arrays.fill(vis,-1);
	
	for(int i=0; i<V; i++)
	{
		if(vis[i] == -1 && dfs(adj, vis, i, -1))
		return true;
		
	}

	return false;


	}
}
