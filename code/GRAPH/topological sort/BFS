https://www.geeksforgeeks.org/problems/topological-sort/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=topological-sort


class Solution {
    // Function to return list containing vertices in Topological order.
    
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        // Your code here
	int V = adj.size();
	Queue<Integer> q = new LinkedList<>();
	int[] indegree = new int[V];
	Arrays.fill(indegree,0);

	ArrayList<Integer> res = new ArrayList<>();

	for(int i=0; i<V; i++)
	{
	    for(int ele : adj.get(i))
		indegree[ele]++;
	}

	for(int i=0; i<V; i++)
	{
		if(indegree[i] == 0)
		{
		q.offer(i);
		res.add(i);
		}
	}

	while(!q.isEmpty())
	{
		int ele = q.poll();
		for(int e : adj.get(ele))
		{
			indegree[e]--;
			if(indegree[e]== 0)
			{
				q.offer(e);
				res.add(e);
			}
		}
	}

// 	if(res.size() == V) return true;
// 	else 
// 	return false;

	if(res.size() == V) return res;
	else 
	return new ArrayList<>();

	

	
    }
}
