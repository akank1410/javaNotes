//given set of disk
// you have to print the order in which the list will get deleted
// given that a parent list cannot be deleted before its child's list

import java.util.*;

class Snap
{
	String p;
	List<String> child;
	Snap(String p, List<String> child)
	{
		this.p = p;
		this.child = child;
	}
}

public class Main
{

	static void dfs(ArrayList<ArrayList<Integer>> adj, int[] vis, int node, ArrayList<String> res, String[] disk)
	{
		vis[node] = 1;
	
		for(int ele : adj.get(node))
		{
			if(vis[ele] == -1)
				dfs(adj, vis, ele, res, disk);
		}

		res.add(disk[node]);
	}

	static void fun()
	{
		String[] disk = {"A", "B", "C", "D", "E"};	

		ArrayList<Snap> s = new ArrayList<>();	

		s.add(new Snap("A", Arrays.asList("B","C")));
		s.add(new Snap("B", Arrays.asList("C")));
		s.add(new Snap("C", Arrays.asList("D"))); 
		s.add(new Snap("D", Arrays.asList()));

		//-------------------
		int n = disk.length;

		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		int[] vis = new int[n];
		Arrays.fill(vis, -1);
		ArrayList<String> res = new ArrayList<>();

		HashMap<String, Integer> hmap = new HashMap<>();

		//Creating adjacent matrix
		for(int i=0; i<n; i++)
		{
			adj.add(new ArrayList<>());
			hmap.put(disk[i], i);
		}
		
		for(Snap ss : s)
		{
			int p = hmap.get(ss.p);	
			for(String c : ss.child)
				adj.get(p).add(hmap.get(c));
		}  

		for(int i=0; i<n; i++)
		{
			if(vis[i] == -1)
				dfs(adj, vis, i, res, disk);
		}

        for(String ele : res)
		System.out.print(ele + " ");

	}

    public static void main(String args[])
    {

        fun();
    }
}


Output:
D C B A E 
