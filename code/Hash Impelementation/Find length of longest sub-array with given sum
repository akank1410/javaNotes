Similar question : Find the longest sub-array with equal number of 1s and 0s
arr[] = {1,0,1,1,1,0,0}  => 6

Eg: 

arr[] = {8, 3, 1, 5, -6, 6, 2, 2}
sum = 4

m = {} (Initially)
m = {(8,0)} | 0
m = {(8,0),(11,1)} | 1
m = {(8,0),(11,1),(12,2)} | 2
m = {(8,0),(11,1),(12,2),(17,3)} | 3
m = {(8,0),(11,1),(12,2),(17,3)} | 4
m = {(8,0),(11,1),(12,2),(17,3)} | 5
m = {(8,0),(11,1),(12,2),(17,3),(19,6)} | 6
m = {(8,0),(11,1),(12,2),(17,3),(19,6),(21,7)} | 7

TC: O(n)
SC : O(n)

----------

Code:

import java.util.*;
public class Main {

    static int max_len(int arr[], int target)
    {
       HashMap<Integer, Integer> hmap = new HashMap<>();

        int count=0, preS=0;
        hmap.put(0,-1);

        for(int i=0; i<arr.length; i++)
        {
            preS += arr[i];
            int diff = preS-target;

            if(hmap.containsKey(diff))
            count = Math.max(count,i-hmap.get(diff));

            if(hmap.containsKey(preS) == false)
                hmap.put(preS,i);

        }

        return count;
    }

    public static void main(String args[]) {
        int arr[] = {8, 3, 1, 5, -6, 6, 2, 2};

        System.out.println(max_len(arr,4));
        
    }
}
