// https://www.geeksforgeeks.org/problems/overlapping-intervals--170633/1

Syntax 1:

class Solution {
    public List<int[]> mergeOverlap(int[][] arr) {
        // Code here // Code here
	int n = arr.length;
	if(n==0) return new ArrayList<>();
	
	Arrays.sort(arr, (a,b) -> a[0]-b[0]);

	int start = arr[0][0], end = arr[0][1];
	List<int[]> lis =  new ArrayList<>();

	for(int[] i : arr)
	{
		if(i[0]<=end)
		end = Math.max(end,i[1]);
		else
		{
			lis.add(new int[]{start,end});
			start = i[0];
			end = i[1];
		}
	}
	lis.add(new int[]{start,end});
	return lis;
    }
}

--------------------------------------------------------------------------
Syntax 2:

class Solution {
    public List<int[]> mergeOverlap(int[][] arr) {
        // Code here // Code here
	int n = arr.length;
	if(n==0) return new ArrayList<>();
	
	Arrays.sort(arr, (a,b)->Integer.compare(a[0],b[0]));

	List<int[]> lis = new ArrayList<>();
	
	lis.add(new int[]{arr[0][0], arr[0][1]});

	for(int i=1; i<n; i++)
	{
		int[] last = lis.get(lis.size()-1);
		int[] curr = arr[i];

		if(curr[0] <= last[1])
			last[1] = Math.max(last[1],curr[1]);
		else
			lis.add(new int[]{curr[0],curr[1]});
	}
	return lis;
    }
}
