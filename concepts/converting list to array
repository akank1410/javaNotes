if return type is List<int[]> 
returning an empty list : return new ArrayList<>();
------------
int start = 0, end=-1;
List<int[]> lis = new ArrayList<>();
lis.add(new int[]{start,end});
------------------
sorting 2d array : int[][] arr
Arrays.sort(arr, (a,b) -> a[0]-b[0]);
Arrays.sort(arr, (a,b) -> Integer.compare(a[0],b[0]));

Converting list to array
ArrayList<Integer> arr = new ArrayList<>() -> int[]

int[] res = arr.toArray();  // this will not work because Interger[] res = arr.toArray() since Integer is a wrapper class
--------------------------


int[][] arr; int[] newInterval;

List<int[]> res = new ArrayList<>();

int[][] a = res.toArray(new int[res.size()][]);

2d array declaration with size :  int[][] arr = new int[n][2];  //it is necessay to add both dimesion size
https://www.geeksforgeeks.org/problems/n-meetings-in-one-room-1587115620/1

int[][] a = new int[res.size()][];

length of 1d array : int [] a => int l = a.length;
lenght of 2d array : int[][] a => int r = a.length; int c = a[0].length;
length of list : List<> l = new ArrayList<>(); : int len = l.size()

-> DECLARE & INITIAIZE 1-D ARRAY IN JAVA
int[] myArr = new int[]{1, 2, 3};

-> DECLAER & INITIALIZE A N*M ARRAY IN JAVA
int[][] arr = new int[5][3];

-> When initializing a 2D array, 
  specifying first dimension is necessary (no. of columns)
  but providing the second dimesion (no. of columns) may be omitted

-> List<List<Integer>> lis = new ArrayList<>()
convert this to 


Converting HashMap to arraylist

HashMap<ArrayList<Integer>> to ArrayList<ArrayList<Integer>>
-->
HashMap<ArrayList<Integer>> hmap = new HashMap<>();

ArrayList<ArrayList<Integer>> res = new ArrayList<>();
//res.addAll(hmap.values();
for(int i=0; i<hashSize();i++)
{
  if(hmap.containsKey(i)) res.add(hmap.get(i));
  else res.add(new ArrayList<>());


--

import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;

public class HelloWorld{

     public static void main(String []args){
            List<List<String>> stringListList = new ArrayList<>();
            stringListList.add(Arrays.asList(new String[] {"(0,0)", "(0,1)"} ));
            stringListList.add(Arrays.asList(new String[] {"(1,0)", "(1,1)", "(1,2)"} ));
            stringListList.add(Arrays.asList(new String[] {"(2,0)", "(2,1)"} ));

            int count=stringListList.stream().mapToInt(i -> i.size()).sum();

            System.out.println("stringListList count: "+count);
     }
}


--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------

import java.io.*; 
  
class GFG { 
    public static void main(String[] args) 
    { 
        // The line below will throw an error, as the first 
        // dimension(no. of rows) is not specified 
        int[][] arr = new int[][3]; 
  
        // The line below will execute without any error, as 
        // the first dimension(no. of rows) is specified 
        int[][] arr = new int[2][]; 
    } 
}

https://www.geeksforgeeks.org/different-ways-to-declare-and-initialize-2-d-array-in-java/

reference : https://leetcode.com/problems/insert-interval/submissions/1320723284/
-------------------------------------------------------------------------------------------

reference :  https://leetcode.com/problems/merge-intervals/submissions/1250201844/


---------------------------------

How to declare and initialize a 1d array

int[] a = new int[]{1,2,3};

to learn about array and list conversion do:
1. insert intervals
2. merge intervals


https://leetcode.com/problems/merge-intervals/submissions/1321914761/  (O(n) + nlogn)
https://leetcode.com/problems/merge-intervals/submissions/1321907908/ (O(n^2) + nlogn)
https://leetcode.com/problems/merge-intervals/submissions/1321902836/ (O(n^2) + nlogn)

==================================

  
Chaining in hash map

    public ArrayList<ArrayList<Integer>> separateChaining(int arr[], int n, int hashSize)
    {
        
        HashMap<Integer,ArrayList<Integer>> hmap = new HashMap <>();
        
        for(int ele : arr)
        {
            int i = ele%hashSize;
            if(hmap.containsKey(i))
                hmap.get(i).add(ele);
            else
                hmap.put(i,new ArrayList<>(Arrays.asList(ele)));
        }
        
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        for(int i=0; i<hashSize; i++)
        {
            if(hmap.containsKey(i))
                res.add(hmap.get(i));
            else
                res.add(new ArrayList<>());
        }
            

        return res;
        
    }
}
